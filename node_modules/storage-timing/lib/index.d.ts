declare type StorageType = "localStorage" | "sessionStorage";
declare type Key = number | string;
declare type IAtom<K extends Key = Key, V = any> = {
    key: K;
    value: V;
    createAt: number;
    updateAt: number;
    timeout: number;
};
declare type IAtomMini<K extends Key, V = any> = {
    k: K;
    v: V;
    cr: number;
    up: number;
    t: number;
};
declare type StorageModalMini<K extends Key = Key> = {
    version: string;
    atoms: IAtomMini<K, any>[];
};
/** 存储在 Storage 中的数据模型 */
declare type StorageModal<K extends Key = Key> = {
    version: string;
    atoms: IAtom<K, any>[];
};
/** 模型工具类，包含对模型进行控制的静态方法 */
declare class ModalUtils {
    static compress<K extends Key = Key>(atom: IAtom<K>): IAtomMini<K>;
    static decompression<K extends Key = Key>(atom: IAtomMini<K>): IAtom<K>;
    /** 是否是一个永久时间 */
    static isForever(time: number): boolean;
    /** 是否超时 */
    static isTimeout(timeout: number): boolean;
    /** 模型数据检查 */
    static StorageModalMiniCheck(m: unknown): m is StorageModalMini;
}

declare const PROJECT_NAME = "StorageTiming";
/** 永不超时 */
declare const NEVER_TIME_OUT = -1;
/** 默认值：默认 storage 使用的 key */
declare const DV_STORAGE_KEY = "STORAGE_TIMING";
/** 默认值：默认 storage 使用的类型 */
declare const DV_STORAGE_TYPE: StorageType;
/** 默认值：默认 storage 的版本 */
declare const DV_STORAGE_VERSION: string;

declare class Atom<K extends Key, D = any> {
    private st;
    private key;
    constructor({ st, key }: {
        st: StorageTiming;
        key: K;
    });
    /** 获取原子数据本身，无论是否过期 */
    getMeta(): IAtom<Key, D> | null;
    get(): D | null;
    get(def: D): D;
    set(value: D, timeout?: number): void;
    remove(): void;
}
interface OnVersionChange<K extends Key = Key> {
    (old: IAtom[], keep: (atom: IAtom<K, any>) => void, oldVersion: string): void;
}
declare class StorageTiming<K extends Key = Key> {
    modal: StorageModal<K>;
    private version;
    private storageKey;
    private engine;
    private onVersionChange?;
    constructor({ version, storageKey, type, onVersionChange, clearTimeout, }?: {
        storageKey?: string;
        version?: string;
        onVersionChange?: OnVersionChange<K>;
        type?: StorageType;
        clearTimeout?: boolean;
    });
    /** 初始化模型 */
    private initModal;
    /** 版本检查 */
    private versionCheck;
    /** 保存到 Storage */
    private save;
    /** 根据 atom.key 查找所在 modal.atoms 中的 index */
    private index;
    /** 查找一个 atom */
    findAtom<D = any>(key: K): IAtom<K, D> | null;
    /** 设置一个 atom */
    setAtom<D = any>(key: K, value: D, timeout?: number): void;
    /** 删除一个 atom */
    removeAtom(key: K): void;
    atom<D = any>(key: K): Atom<K, D>;
    getAtoms(): IAtom<K, any>[];
    /** 清空数据，包括 Storage */
    clear(): void;
    /** 清理超时数据 */
    clearTimeout(): void;
    info(): {
        storageKey: string;
        version: string;
    };
}

export { DV_STORAGE_KEY, DV_STORAGE_TYPE, DV_STORAGE_VERSION, IAtom, IAtomMini, Key, ModalUtils, NEVER_TIME_OUT, PROJECT_NAME, StorageModal, StorageModalMini, StorageType, StorageTiming as Store };
