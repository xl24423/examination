'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var PROJECT_NAME = "StorageTiming";
/** 永不超时 */
var NEVER_TIME_OUT = -1;
/** 默认值：默认 storage 使用的 key */
var DV_STORAGE_KEY = "STORAGE_TIMING";
/** 默认值：默认 storage 使用的类型 */
var DV_STORAGE_TYPE = "localStorage";
/** 默认值：默认 storage 的版本 */
var DV_STORAGE_VERSION = "1.0.0";

function isNull(v) {
    return Object.prototype.toString.call(v) === "[object Null]";
}
function isNumber(v) {
    return typeof v === "number" || Object.prototype.toString.call(v) === "[object Number]";
}
function isString(v) {
    return typeof v === "string" || Object.prototype.toString.call(v) === "[object String]";
}
function isObject(v) {
    return Object.prototype.toString.call(v) === "[object Object]";
}
function isUndefined(v) {
    return typeof v === "undefined";
}

/** 模型工具类，包含对模型进行控制的静态方法 */
var ModalUtils = /** @class */ (function () {
    function ModalUtils() {
    }
    ModalUtils.compress = function (atom) {
        return { k: atom.key, v: atom.value, cr: atom.createAt, up: atom.updateAt, t: atom.timeout };
    };
    ModalUtils.decompression = function (atom) {
        return { key: atom.k, value: atom.v, createAt: atom.cr, updateAt: atom.up, timeout: atom.t };
    };
    /** 是否是一个永久时间 */
    ModalUtils.isForever = function (time) {
        return time === NEVER_TIME_OUT;
    };
    /** 是否超时 */
    ModalUtils.isTimeout = function (timeout) {
        return !ModalUtils.isForever(timeout) && Date.now() > timeout;
    };
    /** 模型数据检查 */
    ModalUtils.StorageModalMiniCheck = function (m) {
        if (!isObject(m))
            return false;
        if (!isString(m.version))
            return false;
        if (!Array.isArray(m.atoms))
            return false;
        return m.atoms.some(function (a) {
            var key = isString(a.k) || isNumber(a.k);
            var createAt = isNumber(a.cr);
            var updateAt = isNumber(a.up);
            var timeout = isNumber(a.t);
            return key && createAt && updateAt && timeout;
        });
    };
    return ModalUtils;
}());

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var Engine = /** @class */ (function () {
    /**
     * @param storageKey 存储 Storage 使用的 key 名
     * @param type Storage 的类型
     */
    function Engine(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.storageKey, storageKey = _c === void 0 ? DV_STORAGE_KEY : _c, _d = _b.type, type = _d === void 0 ? DV_STORAGE_TYPE : _d;
        // 唯一实例检查
        if (Engine.uniqueStorageKey.includes(storageKey)) {
            throw new Error("".concat(PROJECT_NAME, ": Storagekey \"").concat(storageKey, "\" has been used. An \"engineOptions.storageKye\" the same storage can only be instantiated once. Please try using a different storageKey."));
        }
        else
            Engine.uniqueStorageKey.push(storageKey);
        this.storageKey = storageKey;
        this.storage = window[type];
        this.type = type;
    }
    Engine.prototype.set = function (data) {
        if (!isUndefined(data))
            this.storage.setItem(this.storageKey, JSON.stringify(data));
    };
    Engine.prototype.get = function () {
        try {
            return JSON.parse(this.storage.getItem(this.storageKey) || "null");
        }
        catch (error) {
            console.error(error);
            console.warn("The \"".concat(this.type, "\" model of key \"").concat(this.storageKey, "\" is corrupt and cannot be resolved using JSON. Use null instead."));
            return null;
        }
    };
    Engine.prototype.clear = function () {
        this.storage.removeItem(this.storageKey);
    };
    /** 根据 storageKey 唯一实例化 */
    Engine.uniqueStorageKey = [];
    return Engine;
}());

var Atom = /** @class */ (function () {
    function Atom(_a) {
        var st = _a.st, key = _a.key;
        this.st = st;
        this.key = key;
    }
    /** 获取原子数据本身，无论是否过期 */
    Atom.prototype.getMeta = function () {
        return this.st.findAtom(this.key);
    };
    Atom.prototype.get = function (def) {
        var defNull = isUndefined(def) ? null : def;
        var meta = this.st.findAtom(this.key);
        if (isNull(meta))
            return defNull;
        else
            return ModalUtils.isTimeout(meta.timeout) ? defNull : meta.value;
    };
    Atom.prototype.set = function (value, timeout) {
        this.st.setAtom(this.key, value, timeout);
    };
    Atom.prototype.remove = function () {
        this.st.removeAtom(this.key);
    };
    return Atom;
}());
var StorageTiming = /** @class */ (function () {
    function StorageTiming(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.version, version = _c === void 0 ? DV_STORAGE_VERSION : _c, _d = _b.storageKey, storageKey = _d === void 0 ? DV_STORAGE_KEY : _d, _e = _b.type, type = _e === void 0 ? DV_STORAGE_TYPE : _e, onVersionChange = _b.onVersionChange, _f = _b.clearTimeout, clearTimeout = _f === void 0 ? false : _f;
        this.version = version;
        this.storageKey = storageKey;
        this.engine = new Engine({ storageKey: storageKey, type: type });
        this.modal = this.initModal(this.engine.get());
        clearTimeout && this.clearTimeout();
        this.onVersionChange = onVersionChange;
        this.versionCheck();
    }
    /** 初始化模型 */
    StorageTiming.prototype.initModal = function (data) {
        if (ModalUtils.StorageModalMiniCheck(data)) {
            return {
                version: data.version,
                atoms: data.atoms.map(function (item) { return ModalUtils.decompression(item); }),
            };
        }
        else
            return { version: this.version, atoms: [] };
    };
    /** 版本检查 */
    StorageTiming.prototype.versionCheck = function () {
        var _a, _b;
        if (this.version === this.modal.version)
            return;
        var oldVersion = this.modal.version;
        this.modal.version = this.version;
        var newAtoms = [];
        (_b = (_a = this.onVersionChange) === null || _a === void 0 ? void 0 : _a.call(this, this.getAtoms(), function (atom) {
            var index = newAtoms.findIndex(function (item) { return item.key === atom.key; });
            if (index === -1) {
                newAtoms.push(atom);
            }
            else {
                newAtoms.splice(index, 1, atom);
            }
        }, oldVersion)) !== null && _b !== void 0 ? _b : [];
        this.modal.atoms = newAtoms;
        this.save();
    };
    /** 保存到 Storage */
    StorageTiming.prototype.save = function () {
        this.engine.set({ version: this.version, atoms: this.modal.atoms.map(ModalUtils.compress) });
    };
    /** 根据 atom.key 查找所在 modal.atoms 中的 index */
    StorageTiming.prototype.index = function (key) {
        return this.modal.atoms.findIndex(function (a) { return a.key === key; });
    };
    /** 查找一个 atom */
    StorageTiming.prototype.findAtom = function (key) {
        var index = this.index(key);
        return index === -1 ? null : __assign({}, this.modal.atoms[index]);
    };
    /** 设置一个 atom */
    StorageTiming.prototype.setAtom = function (key, value, timeout) {
        if (timeout === void 0) { timeout = NEVER_TIME_OUT; }
        var index = this.index(key);
        var now = Date.now();
        if (index === -1) {
            this.modal.atoms.push({ key: key, value: value, createAt: now, updateAt: now, timeout: timeout });
        }
        else {
            var atom = this.modal.atoms[index];
            this.modal.atoms.splice(index, 1, { key: key, value: value, createAt: atom.createAt, updateAt: now, timeout: timeout });
        }
        this.save();
    };
    /** 删除一个 atom */
    StorageTiming.prototype.removeAtom = function (key) {
        var index = this.index(key);
        if (index !== -1) {
            this.modal.atoms.splice(index, 1);
            this.save();
        }
    };
    StorageTiming.prototype.atom = function (key) {
        return new Atom({ st: this, key: key });
    };
    StorageTiming.prototype.getAtoms = function () {
        return this.modal.atoms.map(function (item) { return (__assign({}, item)); });
    };
    /** 清空数据，包括 Storage */
    StorageTiming.prototype.clear = function () {
        this.modal.atoms = [];
        this.engine.clear();
    };
    /** 清理超时数据 */
    StorageTiming.prototype.clearTimeout = function () {
        this.modal.atoms = this.modal.atoms.filter(function (atom) { return !ModalUtils.isTimeout(atom.timeout); });
        this.save();
    };
    StorageTiming.prototype.info = function () {
        return {
            storageKey: this.storageKey,
            version: this.version,
        };
    };
    return StorageTiming;
}());

exports.DV_STORAGE_KEY = DV_STORAGE_KEY;
exports.DV_STORAGE_TYPE = DV_STORAGE_TYPE;
exports.DV_STORAGE_VERSION = DV_STORAGE_VERSION;
exports.ModalUtils = ModalUtils;
exports.NEVER_TIME_OUT = NEVER_TIME_OUT;
exports.PROJECT_NAME = PROJECT_NAME;
exports.Store = StorageTiming;
